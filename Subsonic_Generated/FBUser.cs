using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace BlueIkons_DB
{
	/// <summary>
	/// Strongly-typed collection for the FBUser class.
	/// </summary>
    [Serializable]
	public partial class FBUserCollection : ActiveList<FBUser, FBUserCollection>
	{	   
		public FBUserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>FBUserCollection</returns>
		public FBUserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                FBUser o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the FBUsers table.
	/// </summary>
	[Serializable]
	public partial class FBUser : ActiveRecord<FBUser>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public FBUser()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public FBUser(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public FBUser(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public FBUser(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("FBUsers", TableType.Table, DataService.GetInstance("BlueIkons"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFbid = new TableSchema.TableColumn(schema);
				colvarFbid.ColumnName = "fbid";
				colvarFbid.DataType = DbType.Int64;
				colvarFbid.MaxLength = 0;
				colvarFbid.AutoIncrement = false;
				colvarFbid.IsNullable = false;
				colvarFbid.IsPrimaryKey = true;
				colvarFbid.IsForeignKey = false;
				colvarFbid.IsReadOnly = false;
				colvarFbid.DefaultSetting = @"";
				colvarFbid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbid);
				
				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "first_name";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 100;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);
				
				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "last_name";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 100;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);
				
				TableSchema.TableColumn colvarFbemail = new TableSchema.TableColumn(schema);
				colvarFbemail.ColumnName = "fbemail";
				colvarFbemail.DataType = DbType.String;
				colvarFbemail.MaxLength = 100;
				colvarFbemail.AutoIncrement = false;
				colvarFbemail.IsNullable = true;
				colvarFbemail.IsPrimaryKey = false;
				colvarFbemail.IsForeignKey = false;
				colvarFbemail.IsReadOnly = false;
				colvarFbemail.DefaultSetting = @"";
				colvarFbemail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbemail);
				
				TableSchema.TableColumn colvarPaypalemail = new TableSchema.TableColumn(schema);
				colvarPaypalemail.ColumnName = "paypalemail";
				colvarPaypalemail.DataType = DbType.String;
				colvarPaypalemail.MaxLength = 100;
				colvarPaypalemail.AutoIncrement = false;
				colvarPaypalemail.IsNullable = true;
				colvarPaypalemail.IsPrimaryKey = false;
				colvarPaypalemail.IsForeignKey = false;
				colvarPaypalemail.IsReadOnly = false;
				colvarPaypalemail.DefaultSetting = @"";
				colvarPaypalemail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaypalemail);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "created_date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarLastChanged = new TableSchema.TableColumn(schema);
				colvarLastChanged.ColumnName = "last_changed";
				colvarLastChanged.DataType = DbType.DateTime;
				colvarLastChanged.MaxLength = 0;
				colvarLastChanged.AutoIncrement = false;
				colvarLastChanged.IsNullable = true;
				colvarLastChanged.IsPrimaryKey = false;
				colvarLastChanged.IsForeignKey = false;
				colvarLastChanged.IsReadOnly = false;
				colvarLastChanged.DefaultSetting = @"";
				colvarLastChanged.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastChanged);
				
				TableSchema.TableColumn colvarAccessToken = new TableSchema.TableColumn(schema);
				colvarAccessToken.ColumnName = "Access_Token";
				colvarAccessToken.DataType = DbType.String;
				colvarAccessToken.MaxLength = 200;
				colvarAccessToken.AutoIncrement = false;
				colvarAccessToken.IsNullable = true;
				colvarAccessToken.IsPrimaryKey = false;
				colvarAccessToken.IsForeignKey = false;
				colvarAccessToken.IsReadOnly = false;
				colvarAccessToken.DefaultSetting = @"";
				colvarAccessToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccessToken);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["BlueIkons"].AddSchema("FBUsers",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Fbid")]
		[Bindable(true)]
		public long Fbid 
		{
			get { return GetColumnValue<long>(Columns.Fbid); }
			set { SetColumnValue(Columns.Fbid, value); }
		}
		  
		[XmlAttribute("FirstName")]
		[Bindable(true)]
		public string FirstName 
		{
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		  
		[XmlAttribute("LastName")]
		[Bindable(true)]
		public string LastName 
		{
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		  
		[XmlAttribute("Fbemail")]
		[Bindable(true)]
		public string Fbemail 
		{
			get { return GetColumnValue<string>(Columns.Fbemail); }
			set { SetColumnValue(Columns.Fbemail, value); }
		}
		  
		[XmlAttribute("Paypalemail")]
		[Bindable(true)]
		public string Paypalemail 
		{
			get { return GetColumnValue<string>(Columns.Paypalemail); }
			set { SetColumnValue(Columns.Paypalemail, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("LastChanged")]
		[Bindable(true)]
		public DateTime? LastChanged 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastChanged); }
			set { SetColumnValue(Columns.LastChanged, value); }
		}
		  
		[XmlAttribute("AccessToken")]
		[Bindable(true)]
		public string AccessToken 
		{
			get { return GetColumnValue<string>(Columns.AccessToken); }
			set { SetColumnValue(Columns.AccessToken, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varFbid,string varFirstName,string varLastName,string varFbemail,string varPaypalemail,DateTime? varCreatedDate,DateTime? varLastChanged,string varAccessToken)
		{
			FBUser item = new FBUser();
			
			item.Fbid = varFbid;
			
			item.FirstName = varFirstName;
			
			item.LastName = varLastName;
			
			item.Fbemail = varFbemail;
			
			item.Paypalemail = varPaypalemail;
			
			item.CreatedDate = varCreatedDate;
			
			item.LastChanged = varLastChanged;
			
			item.AccessToken = varAccessToken;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varFbid,string varFirstName,string varLastName,string varFbemail,string varPaypalemail,DateTime? varCreatedDate,DateTime? varLastChanged,string varAccessToken)
		{
			FBUser item = new FBUser();
			
				item.Fbid = varFbid;
			
				item.FirstName = varFirstName;
			
				item.LastName = varLastName;
			
				item.Fbemail = varFbemail;
			
				item.Paypalemail = varPaypalemail;
			
				item.CreatedDate = varCreatedDate;
			
				item.LastChanged = varLastChanged;
			
				item.AccessToken = varAccessToken;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FbidColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FbemailColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PaypalemailColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LastChangedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AccessTokenColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Fbid = @"fbid";
			 public static string FirstName = @"first_name";
			 public static string LastName = @"last_name";
			 public static string Fbemail = @"fbemail";
			 public static string Paypalemail = @"paypalemail";
			 public static string CreatedDate = @"created_date";
			 public static string LastChanged = @"last_changed";
			 public static string AccessToken = @"Access_Token";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
