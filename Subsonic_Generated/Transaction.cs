using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace BlueIkons_DB
{
	/// <summary>
	/// Strongly-typed collection for the Transaction class.
	/// </summary>
    [Serializable]
	public partial class TransactionCollection : ActiveList<Transaction, TransactionCollection>
	{	   
		public TransactionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TransactionCollection</returns>
		public TransactionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Transaction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Transactions table.
	/// </summary>
	[Serializable]
	public partial class Transaction : ActiveRecord<Transaction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Transaction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Transaction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Transaction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Transaction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Transactions", TableType.Table, DataService.GetInstance("BlueIkons"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTxKey = new TableSchema.TableColumn(schema);
				colvarTxKey.ColumnName = "Tx_Key";
				colvarTxKey.DataType = DbType.Int32;
				colvarTxKey.MaxLength = 0;
				colvarTxKey.AutoIncrement = true;
				colvarTxKey.IsNullable = false;
				colvarTxKey.IsPrimaryKey = true;
				colvarTxKey.IsForeignKey = false;
				colvarTxKey.IsReadOnly = false;
				colvarTxKey.DefaultSetting = @"";
				colvarTxKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxKey);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarGiftKey = new TableSchema.TableColumn(schema);
				colvarGiftKey.ColumnName = "Gift_Key";
				colvarGiftKey.DataType = DbType.Int32;
				colvarGiftKey.MaxLength = 0;
				colvarGiftKey.AutoIncrement = false;
				colvarGiftKey.IsNullable = true;
				colvarGiftKey.IsPrimaryKey = false;
				colvarGiftKey.IsForeignKey = false;
				colvarGiftKey.IsReadOnly = false;
				colvarGiftKey.DefaultSetting = @"";
				colvarGiftKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiftKey);
				
				TableSchema.TableColumn colvarInitDate = new TableSchema.TableColumn(schema);
				colvarInitDate.ColumnName = "Init_date";
				colvarInitDate.DataType = DbType.DateTime;
				colvarInitDate.MaxLength = 0;
				colvarInitDate.AutoIncrement = false;
				colvarInitDate.IsNullable = true;
				colvarInitDate.IsPrimaryKey = false;
				colvarInitDate.IsForeignKey = false;
				colvarInitDate.IsReadOnly = false;
				colvarInitDate.DefaultSetting = @"";
				colvarInitDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitDate);
				
				TableSchema.TableColumn colvarCollectedDate = new TableSchema.TableColumn(schema);
				colvarCollectedDate.ColumnName = "Collected_date";
				colvarCollectedDate.DataType = DbType.DateTime;
				colvarCollectedDate.MaxLength = 0;
				colvarCollectedDate.AutoIncrement = false;
				colvarCollectedDate.IsNullable = true;
				colvarCollectedDate.IsPrimaryKey = false;
				colvarCollectedDate.IsForeignKey = false;
				colvarCollectedDate.IsReadOnly = false;
				colvarCollectedDate.DefaultSetting = @"";
				colvarCollectedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCollectedDate);
				
				TableSchema.TableColumn colvarTxnId = new TableSchema.TableColumn(schema);
				colvarTxnId.ColumnName = "txn_id";
				colvarTxnId.DataType = DbType.String;
				colvarTxnId.MaxLength = 50;
				colvarTxnId.AutoIncrement = false;
				colvarTxnId.IsNullable = true;
				colvarTxnId.IsPrimaryKey = false;
				colvarTxnId.IsForeignKey = false;
				colvarTxnId.IsReadOnly = false;
				colvarTxnId.DefaultSetting = @"";
				colvarTxnId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxnId);
				
				TableSchema.TableColumn colvarTxStatus = new TableSchema.TableColumn(schema);
				colvarTxStatus.ColumnName = "Tx_Status";
				colvarTxStatus.DataType = DbType.Int32;
				colvarTxStatus.MaxLength = 0;
				colvarTxStatus.AutoIncrement = false;
				colvarTxStatus.IsNullable = true;
				colvarTxStatus.IsPrimaryKey = false;
				colvarTxStatus.IsForeignKey = false;
				colvarTxStatus.IsReadOnly = false;
				colvarTxStatus.DefaultSetting = @"";
				colvarTxStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTxStatus);
				
				TableSchema.TableColumn colvarPakey = new TableSchema.TableColumn(schema);
				colvarPakey.ColumnName = "pakey";
				colvarPakey.DataType = DbType.String;
				colvarPakey.MaxLength = 50;
				colvarPakey.AutoIncrement = false;
				colvarPakey.IsNullable = true;
				colvarPakey.IsPrimaryKey = false;
				colvarPakey.IsForeignKey = false;
				colvarPakey.IsReadOnly = false;
				colvarPakey.DefaultSetting = @"";
				colvarPakey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPakey);
				
				TableSchema.TableColumn colvarReceiverEmail = new TableSchema.TableColumn(schema);
				colvarReceiverEmail.ColumnName = "receiver_email";
				colvarReceiverEmail.DataType = DbType.String;
				colvarReceiverEmail.MaxLength = 100;
				colvarReceiverEmail.AutoIncrement = false;
				colvarReceiverEmail.IsNullable = true;
				colvarReceiverEmail.IsPrimaryKey = false;
				colvarReceiverEmail.IsForeignKey = false;
				colvarReceiverEmail.IsReadOnly = false;
				colvarReceiverEmail.DefaultSetting = @"";
				colvarReceiverEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverEmail);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["BlueIkons"].AddSchema("Transactions",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TxKey")]
		[Bindable(true)]
		public int TxKey 
		{
			get { return GetColumnValue<int>(Columns.TxKey); }
			set { SetColumnValue(Columns.TxKey, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public decimal? Amount 
		{
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("GiftKey")]
		[Bindable(true)]
		public int? GiftKey 
		{
			get { return GetColumnValue<int?>(Columns.GiftKey); }
			set { SetColumnValue(Columns.GiftKey, value); }
		}
		  
		[XmlAttribute("InitDate")]
		[Bindable(true)]
		public DateTime? InitDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InitDate); }
			set { SetColumnValue(Columns.InitDate, value); }
		}
		  
		[XmlAttribute("CollectedDate")]
		[Bindable(true)]
		public DateTime? CollectedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CollectedDate); }
			set { SetColumnValue(Columns.CollectedDate, value); }
		}
		  
		[XmlAttribute("TxnId")]
		[Bindable(true)]
		public string TxnId 
		{
			get { return GetColumnValue<string>(Columns.TxnId); }
			set { SetColumnValue(Columns.TxnId, value); }
		}
		  
		[XmlAttribute("TxStatus")]
		[Bindable(true)]
		public int? TxStatus 
		{
			get { return GetColumnValue<int?>(Columns.TxStatus); }
			set { SetColumnValue(Columns.TxStatus, value); }
		}
		  
		[XmlAttribute("Pakey")]
		[Bindable(true)]
		public string Pakey 
		{
			get { return GetColumnValue<string>(Columns.Pakey); }
			set { SetColumnValue(Columns.Pakey, value); }
		}
		  
		[XmlAttribute("ReceiverEmail")]
		[Bindable(true)]
		public string ReceiverEmail 
		{
			get { return GetColumnValue<string>(Columns.ReceiverEmail); }
			set { SetColumnValue(Columns.ReceiverEmail, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal? varAmount,int? varGiftKey,DateTime? varInitDate,DateTime? varCollectedDate,string varTxnId,int? varTxStatus,string varPakey,string varReceiverEmail)
		{
			Transaction item = new Transaction();
			
			item.Amount = varAmount;
			
			item.GiftKey = varGiftKey;
			
			item.InitDate = varInitDate;
			
			item.CollectedDate = varCollectedDate;
			
			item.TxnId = varTxnId;
			
			item.TxStatus = varTxStatus;
			
			item.Pakey = varPakey;
			
			item.ReceiverEmail = varReceiverEmail;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTxKey,decimal? varAmount,int? varGiftKey,DateTime? varInitDate,DateTime? varCollectedDate,string varTxnId,int? varTxStatus,string varPakey,string varReceiverEmail)
		{
			Transaction item = new Transaction();
			
				item.TxKey = varTxKey;
			
				item.Amount = varAmount;
			
				item.GiftKey = varGiftKey;
			
				item.InitDate = varInitDate;
			
				item.CollectedDate = varCollectedDate;
			
				item.TxnId = varTxnId;
			
				item.TxStatus = varTxStatus;
			
				item.Pakey = varPakey;
			
				item.ReceiverEmail = varReceiverEmail;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TxKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn GiftKeyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InitDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectedDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TxnIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TxStatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PakeyColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverEmailColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TxKey = @"Tx_Key";
			 public static string Amount = @"Amount";
			 public static string GiftKey = @"Gift_Key";
			 public static string InitDate = @"Init_date";
			 public static string CollectedDate = @"Collected_date";
			 public static string TxnId = @"txn_id";
			 public static string TxStatus = @"Tx_Status";
			 public static string Pakey = @"pakey";
			 public static string ReceiverEmail = @"receiver_email";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
