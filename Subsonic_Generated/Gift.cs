using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace BlueIkons_DB
{
	/// <summary>
	/// Strongly-typed collection for the Gift class.
	/// </summary>
    [Serializable]
	public partial class GiftCollection : ActiveList<Gift, GiftCollection>
	{	   
		public GiftCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>GiftCollection</returns>
		public GiftCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Gift o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Gift table.
	/// </summary>
	[Serializable]
	public partial class Gift : ActiveRecord<Gift>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Gift()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Gift(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Gift(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Gift(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Gift", TableType.Table, DataService.GetInstance("BlueIkons"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarGiftKey = new TableSchema.TableColumn(schema);
				colvarGiftKey.ColumnName = "Gift_Key";
				colvarGiftKey.DataType = DbType.Int32;
				colvarGiftKey.MaxLength = 0;
				colvarGiftKey.AutoIncrement = true;
				colvarGiftKey.IsNullable = false;
				colvarGiftKey.IsPrimaryKey = true;
				colvarGiftKey.IsForeignKey = false;
				colvarGiftKey.IsReadOnly = false;
				colvarGiftKey.DefaultSetting = @"";
				colvarGiftKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiftKey);
				
				TableSchema.TableColumn colvarSenderFbid = new TableSchema.TableColumn(schema);
				colvarSenderFbid.ColumnName = "sender_fbid";
				colvarSenderFbid.DataType = DbType.Int64;
				colvarSenderFbid.MaxLength = 0;
				colvarSenderFbid.AutoIncrement = false;
				colvarSenderFbid.IsNullable = true;
				colvarSenderFbid.IsPrimaryKey = false;
				colvarSenderFbid.IsForeignKey = false;
				colvarSenderFbid.IsReadOnly = false;
				colvarSenderFbid.DefaultSetting = @"";
				colvarSenderFbid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderFbid);
				
				TableSchema.TableColumn colvarReceiverFbid = new TableSchema.TableColumn(schema);
				colvarReceiverFbid.ColumnName = "receiver_fbid";
				colvarReceiverFbid.DataType = DbType.Int64;
				colvarReceiverFbid.MaxLength = 0;
				colvarReceiverFbid.AutoIncrement = false;
				colvarReceiverFbid.IsNullable = true;
				colvarReceiverFbid.IsPrimaryKey = false;
				colvarReceiverFbid.IsForeignKey = false;
				colvarReceiverFbid.IsReadOnly = false;
				colvarReceiverFbid.DefaultSetting = @"";
				colvarReceiverFbid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverFbid);
				
				TableSchema.TableColumn colvarReceiverEmail = new TableSchema.TableColumn(schema);
				colvarReceiverEmail.ColumnName = "receiver_email";
				colvarReceiverEmail.DataType = DbType.String;
				colvarReceiverEmail.MaxLength = 100;
				colvarReceiverEmail.AutoIncrement = false;
				colvarReceiverEmail.IsNullable = true;
				colvarReceiverEmail.IsPrimaryKey = false;
				colvarReceiverEmail.IsForeignKey = false;
				colvarReceiverEmail.IsReadOnly = false;
				colvarReceiverEmail.DefaultSetting = @"";
				colvarReceiverEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverEmail);
				
				TableSchema.TableColumn colvarWittyMessage = new TableSchema.TableColumn(schema);
				colvarWittyMessage.ColumnName = "witty_message";
				colvarWittyMessage.DataType = DbType.String;
				colvarWittyMessage.MaxLength = 300;
				colvarWittyMessage.AutoIncrement = false;
				colvarWittyMessage.IsNullable = true;
				colvarWittyMessage.IsPrimaryKey = false;
				colvarWittyMessage.IsForeignKey = false;
				colvarWittyMessage.IsReadOnly = false;
				colvarWittyMessage.DefaultSetting = @"";
				colvarWittyMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWittyMessage);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "created_date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarBlueikon = new TableSchema.TableColumn(schema);
				colvarBlueikon.ColumnName = "blueikon";
				colvarBlueikon.DataType = DbType.Int32;
				colvarBlueikon.MaxLength = 0;
				colvarBlueikon.AutoIncrement = false;
				colvarBlueikon.IsNullable = true;
				colvarBlueikon.IsPrimaryKey = false;
				colvarBlueikon.IsForeignKey = false;
				colvarBlueikon.IsReadOnly = false;
				colvarBlueikon.DefaultSetting = @"";
				colvarBlueikon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlueikon);
				
				TableSchema.TableColumn colvarFbpost = new TableSchema.TableColumn(schema);
				colvarFbpost.ColumnName = "fbpost";
				colvarFbpost.DataType = DbType.Boolean;
				colvarFbpost.MaxLength = 0;
				colvarFbpost.AutoIncrement = false;
				colvarFbpost.IsNullable = true;
				colvarFbpost.IsPrimaryKey = false;
				colvarFbpost.IsForeignKey = false;
				colvarFbpost.IsReadOnly = false;
				colvarFbpost.DefaultSetting = @"";
				colvarFbpost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFbpost);
				
				TableSchema.TableColumn colvarReceiverName = new TableSchema.TableColumn(schema);
				colvarReceiverName.ColumnName = "receiver_name";
				colvarReceiverName.DataType = DbType.String;
				colvarReceiverName.MaxLength = 100;
				colvarReceiverName.AutoIncrement = false;
				colvarReceiverName.IsNullable = true;
				colvarReceiverName.IsPrimaryKey = false;
				colvarReceiverName.IsForeignKey = false;
				colvarReceiverName.IsReadOnly = false;
				colvarReceiverName.DefaultSetting = @"";
				colvarReceiverName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverName);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["BlueIkons"].AddSchema("Gift",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("GiftKey")]
		[Bindable(true)]
		public int GiftKey 
		{
			get { return GetColumnValue<int>(Columns.GiftKey); }
			set { SetColumnValue(Columns.GiftKey, value); }
		}
		  
		[XmlAttribute("SenderFbid")]
		[Bindable(true)]
		public long? SenderFbid 
		{
			get { return GetColumnValue<long?>(Columns.SenderFbid); }
			set { SetColumnValue(Columns.SenderFbid, value); }
		}
		  
		[XmlAttribute("ReceiverFbid")]
		[Bindable(true)]
		public long? ReceiverFbid 
		{
			get { return GetColumnValue<long?>(Columns.ReceiverFbid); }
			set { SetColumnValue(Columns.ReceiverFbid, value); }
		}
		  
		[XmlAttribute("ReceiverEmail")]
		[Bindable(true)]
		public string ReceiverEmail 
		{
			get { return GetColumnValue<string>(Columns.ReceiverEmail); }
			set { SetColumnValue(Columns.ReceiverEmail, value); }
		}
		  
		[XmlAttribute("WittyMessage")]
		[Bindable(true)]
		public string WittyMessage 
		{
			get { return GetColumnValue<string>(Columns.WittyMessage); }
			set { SetColumnValue(Columns.WittyMessage, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("Blueikon")]
		[Bindable(true)]
		public int? Blueikon 
		{
			get { return GetColumnValue<int?>(Columns.Blueikon); }
			set { SetColumnValue(Columns.Blueikon, value); }
		}
		  
		[XmlAttribute("Fbpost")]
		[Bindable(true)]
		public bool? Fbpost 
		{
			get { return GetColumnValue<bool?>(Columns.Fbpost); }
			set { SetColumnValue(Columns.Fbpost, value); }
		}
		  
		[XmlAttribute("ReceiverName")]
		[Bindable(true)]
		public string ReceiverName 
		{
			get { return GetColumnValue<string>(Columns.ReceiverName); }
			set { SetColumnValue(Columns.ReceiverName, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long? varSenderFbid,long? varReceiverFbid,string varReceiverEmail,string varWittyMessage,DateTime? varCreatedDate,int? varBlueikon,bool? varFbpost,string varReceiverName)
		{
			Gift item = new Gift();
			
			item.SenderFbid = varSenderFbid;
			
			item.ReceiverFbid = varReceiverFbid;
			
			item.ReceiverEmail = varReceiverEmail;
			
			item.WittyMessage = varWittyMessage;
			
			item.CreatedDate = varCreatedDate;
			
			item.Blueikon = varBlueikon;
			
			item.Fbpost = varFbpost;
			
			item.ReceiverName = varReceiverName;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varGiftKey,long? varSenderFbid,long? varReceiverFbid,string varReceiverEmail,string varWittyMessage,DateTime? varCreatedDate,int? varBlueikon,bool? varFbpost,string varReceiverName)
		{
			Gift item = new Gift();
			
				item.GiftKey = varGiftKey;
			
				item.SenderFbid = varSenderFbid;
			
				item.ReceiverFbid = varReceiverFbid;
			
				item.ReceiverEmail = varReceiverEmail;
			
				item.WittyMessage = varWittyMessage;
			
				item.CreatedDate = varCreatedDate;
			
				item.Blueikon = varBlueikon;
			
				item.Fbpost = varFbpost;
			
				item.ReceiverName = varReceiverName;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn GiftKeyColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SenderFbidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverFbidColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverEmailColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn WittyMessageColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BlueikonColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FbpostColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiverNameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string GiftKey = @"Gift_Key";
			 public static string SenderFbid = @"sender_fbid";
			 public static string ReceiverFbid = @"receiver_fbid";
			 public static string ReceiverEmail = @"receiver_email";
			 public static string WittyMessage = @"witty_message";
			 public static string CreatedDate = @"created_date";
			 public static string Blueikon = @"blueikon";
			 public static string Fbpost = @"fbpost";
			 public static string ReceiverName = @"receiver_name";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
